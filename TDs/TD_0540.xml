<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>
<?xml-model href="CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<technical-decisions xmlns="https://niap-ccevs.org/cc/v1" xmlns:h="http://www.w3.org/1999/xhtml"> <bunch> <applies-to name="Protection Profile for Application Software" max-inclusive="1.3">  </applies-to><decision id="0540"> <notes> Expanded AES Modes in FCS_COP </notes><change xpath=".//f-element[@id='fcs_cop.1.1(1)']" mode="replace"> 
          <f-element id="fcs_cop.1.1(1)"> 
            <title> 
              The 
              <h:b> application </h:b>
              shall perform 
              <h:i> encryption/decryption </h:i>
              in accordance with a specified cryptographic algorithm 
              <selectables linebreak="yes"> 
                <selectable> 
                  AES-CBC (as defined in NIST SP 800-38A) mode
                 </selectable>
                <selectable> 
                  AES-GCM (as defined in NIST SP 800-38D) mode
                 </selectable>
                <selectable> 
                  AES-XTS (as defined in NIST SP 800-38E) mode
                 </selectable><selectable> AES-CCM (as defined in NIST SP 800-38C) mode </selectable> </selectables>
              and cryptographic key sizes 
              <selectables> 
                <selectable> 128-bit </selectable>
                <selectable> 256-bit </selectable> </selectables>
              .
             </title>
            <note role="application"> 
              This is dependent on implementing cryptographic functionality, as in FTP_DIT_EXT.1. 
              <h:br>  </h:br>
              For the first selection, the ST author should choose the mode or modes in which AES operates. For
              the second selection, the ST author should choose the key sizes that are supported by this
              functionality. 128-bit key size is required in order to comply with certain TLS
              implementations. 
              <h:br>  </h:br>
             </note>
            <aactivity> 
              <TSS> None. </TSS><Guidance> 
                The evaluator checks the AGD documents to determine that any configuration that is required to
                be done to configure the functionality for the required modes and key sizes is present.
               </Guidance><Tests> 
                The evaluator shall perform all of the following tests for each algorithm implemented by the
                TSF and used to satisfy the requirements of this PP: 
                <h:br>  </h:br>
                <h:b> AES-CBC Known Answer Tests </h:b>
                <h:p>  </h:p>
                There are four Known Answer Tests (KATs), described below. In all KATs, the plaintext,
                ciphertext, and IV values shall be 128-bit blocks. The results from each test may either be
                obtained by the evaluator directly or by supplying the inputs to the implementer and receiving
                the results in response. To determine correctness, the evaluator shall compare the resulting
                values to those obtained by submitting the same inputs to a known good implementation. 
                <h:ul> 
                  <h:li> 
                    KAT-1. To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of 10
                    plaintext values and obtain the ciphertext value that results from AES-CBC encryption of the
                    given plaintext using a key value of all zeros and an IV of all zeros. Five plaintext values shall
                    be encrypted with a 128-bit all-zeros key, and the other five shall be encrypted with a 256-bit
                    all- zeros key. To test the decrypt functionality of AES-CBC, the evaluator shall perform the
                    same test as for encrypt, using 10 ciphertext values as input and AES-CBC decryption.
                   </h:li>
                  <h:li> 
                    KAT-2. To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of 10 key
                    values and obtain the ciphertext value that results from AES-CBC encryption of an all-zeros
                    plaintext using the given key value and an IV of all zeros. Five of the keys shall be 128-bit keys,
                    and the other five shall be 256-bit keys. To test the decrypt functionality of AES-CBC, the
                    evaluator shall perform the same test as for encrypt, using an all-zero ciphertext value as
                    input and AES-CBC decryption.
                   </h:li>
                  <h:li> 
                    KAT-3. To test the encrypt functionality of AES-CBC, the evaluator shall supply the two sets of
                    key values described below and obtain the ciphertext value that results from AES encryption of
                    an all-zeros plaintext using the given key value and an IV of all zeros. The first set of keys
                    shall have 128 128-bit keys, and the second set shall have 256 256-bit keys. Key i in each set
                    shall have the leftmost i bits be ones and the rightmost N-i bits be zeros, for i in [1,N]. To test
                    the decrypt functionality of AES-CBC, the evaluator shall supply the two sets of key and
                    ciphertext value pairs described below and obtain the plaintext value that results from
                    AES-CBC decryption of the given ciphertext using the given key and an IV of all zeros. The first
                    set of key/ciphertext pairs shall have 128 128-bit key/ciphertext pairs, and the second set of
                    key/ciphertext pairs shall have 256 256-bit key/ciphertext pairs. Key i in each set shall have
                    the leftmost i bits be ones and the rightmost N-i bits be zeros, for i in [1,N]. The ciphertext
                    value in each pair shall be the value that results in an all-zeros plaintext when decrypted with
                    its corresponding key.
                   </h:li>
                  <h:li> 
                    KAT-4. To test the encrypt functionality of AES-CBC, the evaluator shall supply the set of 128
                    plaintext values described below and obtain the two ciphertext values that result from
                    AES-CBC encryption of the given plaintext using a 128-bit key value of all zeros with an IV of all
                    zeros and using a 256-bit key value of all zeros with an IV of all zeros, respectively. Plaintext
                    value i in each set shall have the leftmost i bits be ones and the rightmost 128-i bits be zeros,
                    for i in [1,128].
                   </h:li>
                 </h:ul>
                To test the decrypt functionality of AES-CBC, the evaluator shall perform the same test as for
                encrypt, using ciphertext values of the same form as the plaintext in the encrypt test as input
                and AES-CBC decryption. 
                <h:br>  </h:br>
                <h:b> AES-CBC Multi-Block Message Test </h:b>
                <h:p>  </h:p>
                The evaluator shall test the encrypt functionality by encrypting an i-block message where 1
                &lt; i &lt;= 10. The evaluator shall choose a key, an IV and plaintext message of length i blocks
                and encrypt the message, using the mode to be tested, with the chosen key and IV. The ciphertext
                shall be compared to the result of encrypting the same plaintext message with the same key and IV
                using a known good implementation. The evaluator shall also test the decrypt functionality
                for each mode by decrypting an i-block message where 1 &lt; i &lt;=10. The evaluator shall
                choose a key, an IV and a ciphertext message of length i blocks and decrypt the message, using the
                mode to be tested, with the chosen key and IV. The plaintext shall be compared to the result of
                decrypting the same ciphertext message with the same key and IV using a known good
                implementation. AES-CBC Monte Carlo Tests The evaluator shall test the encrypt
                functionality using a set of 200 plaintext, IV, and key 3- tuples. 100 of these shall use 128 bit
                keys, and 100 shall use 256 bit keys. The plaintext and IV values shall be 128-bit blocks. For
                each 3-tuple, 1000 iterations shall be run as follows: 
                <h:pre> 
                  # Input: PT, IV, Key for i = 1 to 1000: if i == 1: CT[1] = AES-CBC-Encrypt(Key, IV, PT) PT = IV else:
                  CT[i] = AES-CBC-Encrypt(Key, PT) PT = CT[i-1]
                 </h:pre>
                The ciphertext computed in the 1000th iteration (i.e., CT[1000]) is the result for that trial.
                This result shall be compared to the result of running 1000 iterations with the same values
                using a known good implementation. 
                <h:br>  </h:br>
                The evaluator shall test the decrypt functionality using the same test as for encrypt,
                exchanging CT and PT and replacing AES-CBC-Encrypt with AES-CBC-Decrypt. 
                <h:br>  </h:br>
                <h:b> AES-GCM Monte Carlo Tests </h:b>
                <h:p>  </h:p>
                The evaluator shall test the authenticated encrypt functionality of AES-GCM for each
                combination of the following input parameter lengths: 
                <h:ul> 
                  <h:li> 128 bit and 256 bit keys </h:li>
                  <h:li> 
                    Two plaintext lengths. One of the plaintext lengths shall be a non-zero integer multiple of 128
                    bits, if supported. The other plaintext length shall not be an integer multiple of 128 bits, if
                    supported.
                   </h:li>
                  <h:li> 
                    Three AAD lengths. One AAD length shall be 0, if supported. One AAD length shall be a non-zero
                    integer multiple of 128 bits, if supported. One AAD length shall not be an integer multiple of
                    128 bits, if supported.
                   </h:li>
                  <h:li> 
                    Two IV lengths. If 96 bit IV is supported, 96 bits shall be one of the two IV lengths tested.
                   </h:li>
                 </h:ul>
                The evaluator shall test the encrypt functionality using a set of 10 key, plaintext, AAD, and IV
                tuples for each combination of parameter lengths above and obtain the ciphertext value and tag
                that results from AES-GCM authenticated encrypt. Each supported tag length shall be tested at
                least once per set of 10. The IV value may be supplied by the evaluator or the implementation
                being tested, as long as it is known. 
                <h:br>  </h:br>
                The evaluator shall test the decrypt functionality using a set of 10 key, ciphertext, tag, AAD,
                and IV 5-tuples for each combination of parameter lengths above and obtain a Pass/Fail result
                on authentication and the decrypted plaintext if Pass. The set shall include five tuples that
                Pass and five that Fail. 
                <h:br>  </h:br>
                The results from each test may either be obtained by the evaluator directly or by supplying the
                inputs to the implementer and receiving the results in response. To determine correctness,
                the evaluator shall compare the resulting values to those obtained by submitting the same
                inputs to a known good implementation. 
                <h:br>  </h:br>
                <h:b> AES-XTS Tests </h:b>
                <h:p>  </h:p>
                The evaluator shall test the encrypt functionality of XTS-AES for each combination of the
                following input parameter lengths: 
                <h:br>  </h:br>
                256 bit (for AES-128) and 512 bit (for AES-256) keys 
                <h:br>  </h:br>
                <h:br>  </h:br>
                Three data unit (i.e., plaintext) lengths. One of the data unit lengths shall be a non-zero
                integer multiple of 128 bits, if supported. One of the data unit lengths shall be an integer
                multiple of 128 bits, if supported. The third data unit length shall be either the longest
                supported data unit length or 216 bits, whichever is smaller. 
                <h:br>  </h:br>
                <h:br>  </h:br>
                Using a set of 100 (key, plaintext and 128-bit random tweak value) 3-tuples and obtain the
                ciphertext that results from XTS-AES encrypt. 
                <h:br>  </h:br>
                The evaluator may supply a data unit sequence number instead of the tweak value if the
                implementation supports it. The data unit sequence number is a base-10 number ranging between
                0 and 255 that implementations convert to a tweak value internally. 
                <h:br>  </h:br>
                <h:br>  </h:br>
                The evaluator shall test the decrypt functionality of XTS-AES using the same test as for
                encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with XTS-AES
                decrypt.
 <h:br>  </h:br>
  <h:br>  </h:br>
             <h:b>AES-CCM Tests</h:b>
<h:p>  </h:p>
It is not recommended that evaluators use values obtained from static sources such as http://csrc.nist.gov/groups/STM/cavp/documents/mac/ccmtestvectors.zip or use values not generated expressly to exercise the AES-CCM implementation.
<h:p>  </h:p>
The evaluator shall test the generation-encryption and decryption-verification functionality of AES-CCM for the following input parameter and tag lengths:
<h:ul> 
 <h:li> 
Keys: All supported and selected key sizes (e.g., 128, 256 bits).
 </h:li>  <h:li> 
Associated Data: Two or three values for associated data length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported associated data lengths, and 2^16 (65536) bytes, if supported.
 </h:li>  <h:li> 
Payload: Two values for payload length: The minimum (≥ 0 bytes) and maximum (≤ 32 bytes) supported payload lengths.
 </h:li>  <h:li> 
Nonces: All supported nonce lengths (7, 8, 9, 10, 11, 12, 13) in bytes.
 </h:li>  <h:li> 
Tag: All supported tag lengths (4, 6, 8, 10, 12, 14, 16) in bytes.
 </h:li> 
</h:ul> 
<h:p>  </h:p>
The testing for CCM consists of five tests. To determine correctness in each of the below tests, the evaluator shall compare the ciphertext with the result of encryption of the same inputs with a known good implementation.
 <h:br>  </h:br>
  <h:br>  </h:br>
 <h:b>Variable Associated Data Test </h:b>
<h:p>  </h:p>
For each supported key size and associated data length, and any supported payload length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
 <h:br>  </h:br>
 <h:b>Variable Payload Test </h:b>
<h:p>  </h:p>
For each supported key size and payload length, and any supported associated data length, nonce length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
 <h:br>  </h:br>
 <h:b>Variable Nonce Test </h:b>
<h:p>  </h:p>
For each supported key size and nonce length, and any supported associated data length, payload length, and tag length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
 <h:br>  </h:br>
 <h:b>Variable Tag Test </h:b>
<h:p>  </h:p>
For each supported key size and tag length, and any supported associated data length, payload length, and nonce length, the evaluator shall supply one key value, one nonce value, and 10 pairs of associated data and payload values, and obtain the resulting ciphertext.
 <h:br>  </h:br>
 <h:b>Decryption-Verification Process Test </h:b>
<h:p>  </h:p>
To test the decryption-verification functionality of AES-CCM, for each combination of supported associated data length, payload length, nonce length, and tag length, the evaluator shall supply a key value and 15 sets of input plus ciphertext, and obtain the decrypted payload. Ten of the 15 input sets supplied should fail verification and five should pass. </Tests> </aactivity> </f-element> </change> </decision> </bunch> </technical-decisions>