<?xml version="1.0" encoding="UTF-8"?>
<!-- Changed namespace to something we could populate with RDDL describing the namespace. -->
<!-- Temporarily removed schema references: xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="ProtectionProfile.xsd" -->
<!-- @name is captured in meta-info below. -->
<!-- What's with the @image? -->

<pp:PP xmlns="http://docbook.org/ns/docbook" xmlns:pp="http://www.commoncriteriaportal.org/ns/pp" xmlns:xlink="http://www.w3.org/1999/xlink">
	<!-- TO DO: Capture non-CC-specific metadata in a more common standard, e.g. 
	DocBook <info> or HTML <meta>. Better yet, automate some of it with a version 
	control system. -->
	<info>
		<title>Protection Profile for Application Software</title>
		<titleabbrev>Applications PP</titleabbrev>
		<edition>0.1</edition>
		<author><orgname>National Information Assurance Partnership</orgname></author>
		<date>2014-01-29</date>
		<!-- <PPCertificationID>NIAP-whoknows</PPCertificationID> -->
		<keywordset>
			<keyword>application</keyword>
			<keyword>software</keyword>
		</keywordset>
		<revhistory>
			<revision>
				<revnumber>0.1</revnumber>
				<date>2014-01-29</date>
			</revision>
		</revhistory>
	</info>
	
	<!-- @role values map parts of the document to parts required for Protection Profiles as specified in CC Part 3 APE_INT. -->
	<!-- For now see Roles.txt. -->
	<!-- TO DO: Post information about roles to something like http://www.commoncriteria.org/pp/roles (explicit semantics). -->
	<chapter role="APE_INT"> 
		<info><title>Introduction</title></info>
		
		<!-- Automatically derived from <pp>/<info>. -->
		<pp:PP_Reference />
		
		<section role="APE_INT.overview">
			<info><title>Overview</title></info>
			
			<para>
				The scope of this Protection Profile is to describe the
				functionality of application software in terms of
				<citation><xref linkend="bibCC" /></citation>
				and to define functional and assurance requirements for such
				software. In recent years, software attacks have shifted from
				targeting operating systems to targeting applications. This has been
				the natural response to improvements in operating system security
				and development processes. As a result, it is paramount that the
				security of applications be improved to reduce the risk to client
				machines and enterprise networks. The requirements in this
				Protection Profile are intended to improve the security of
				applications by ensuring that they take advantage of operating
				system security services, environmental mitigations, and underlying
				hardware. Additionally, these requirements attempt to define
				acceptable behavior for applications regardless of the security
				features provided by the operating system.
			</para>
			
			<section role="APE_INT.overview.TOE_type">
				<info><title>Compliant Targets of Evaluation</title></info>
				<para>
					The requirements in this document apply to all application software
					that runs on any operating system -- regardless of the function of
					the application, identity of the operating system, or composition of
					the underlying platform. For purposes of this document, an
					application is defined as software that runs on an operating system
					and performs tasks on behalf of the user or owner of the platform.
					As distinguished from applications, operating system software
					manages platform resources and provides services for applications.
					Applications that come bundled with an operating system (such as web
					browsers, email clients and media players) fall within the scope of
					these requirements. Naturally, third-party software (such as word
					processors, PDF readers, and downloadable smart-phone apps) is also
					in scope. Systems software that is delivered and installed with an
					application (such as kernel drivers) is considered part of the
					application for purposes of this document. BIOS and other firmware,
					the operating system kernel, and other systems software (and
					drivers) that are essential to the functioning of the system are
					outside the scope of this document. System services -- even if they
					run with user-level privileges -- are considered to be part of the
					operating system, and are thus also out of scope. Some application
					types are covered by more specific protection profiles. Such
					applications are subject to both this Protection Profile (PP) and
					the PP that addresses their special functionality. For example, VPN
					Client Applications are subject to the requirements in both this PP
					and the VPN Client PP.
				</para>
			</section>
			
			<!-- TO DO: Specify use cases. -->
			<section role="APE_INT.overview.usage">
				<info><title>Use Cases</title></info>
				<para>TO DO: Fill in Use Cases...</para>
			</section>
			
			<!-- TO DO: Specify TOE configuration and environment. -->
			<!-- CC calls this section "Available non-TOE hardware/software/firmware".  "Environment" is much more concise. -->
			<section role="APE_INT.environment">
				<info><title>TOE Configuration and TOE Environment</title></info>
				
				<!-- TO DO: Specify TOE boundary. -->
				<section xml:id="APE_INT.TOE_Boundary">
					<info><title>TOE boundary</title></info>
					
					<figure xml:id="generic_TOE_design">
						<info><title>Applications on Operating System</title></info>
						<mediaobject>
							<imageobject>
								<imagedata fileref="images/appdiagram.png"/>
							</imageobject>
						</mediaobject>
					</figure>
				</section>
			</section>
		</section>
	</chapter>
	
	<!-- 
		TO DO: 
		Automate conformance claim based on semantic xlinks to CC (required) 
		and other PPs and/or packages (optional). The conformance requirement (strict 
		or demonstrable) must still be specified by authors as it has forward implications 
		to STs and other PPs claiming conformance to it.
	-->
	<chapter role="APE_CCL">
		<info><title>Conformance Claims</title></info>
		
		<section role="APE_CCL.claim">
			<info><title>Claims</title></info>
			
			<!-- TO DO: Derive @part2 and @part3 based on whether any PP functional or assurance elements refine corresponding CC elements. -->
			<!-- TO DO: Change @href to "http://www.commoncriteriaportal.org/cc/cc3R4.xml" when an unzipped CC XML gets hosted. -->
			<!-- TO DO: Populate arc role URL with something informative. -->
			<pp:CC_Conformance part2="extended" part3="extended" xlink:href="cc3R4.xml" xlink:arcrole="https://www.commoncriteriaportal.org/roles/arc/conformance" />
			<!-- No PP_Conformance or Package_Conformance claims -->
		</section>
		
		<pp:ConformanceRequired statement="strict" />
	</chapter>
	
	<chapter role="APE_SPD">
		<info><title>Security Problem Definition</title></info>
		<!-- TO DO: Cross-reference Annex A, if it exists. -->
		<para>
			Annex A presents the Security Problem Description (SPD) in a more
			"traditional" form. The following sections detail the problems that
			compliant TOEs will address; references to the "traditional"
			statements in Annex A are included.
		</para>
		<!-- TO DO: Consider markup for threat agent/attack/asset. -->
		<section role="APE_SPD.threats">
			<info><title>Threats</title></info>
			<pp:threat xml:id="T.BRUTEFORCE">
				<para>
					An attacker may perform a brute force attack in order to get
					verified by the TOE using the identity of another user. In this way
					the attacker is trying to get access to the assets residing in the
					environment that should be protected with the support of the TOE.
					This threat considers two different threat agents and corresponding
					adverse actions:
					
					<itemizedlist>
						<listitem>
							<para>
								A not really hostile user who just tries to get verified with a
								wrong claimed identity a few times. The motivation of such a user
								is usually just curiosity. He does not need specific knowledge
								about the TOE to perform this attack.
							</para>
						</listitem>
					</itemizedlist>
				</para>
			</pp:threat>
			<pp:threat xml:id="T.MODIFY_ASSETS">
				<para>
					An attacker may try to modify secondary assets like biometric
					references or other security-relevant system configuration data.
					Such attacks could compromise the integrity of the user security
					attributes resulting in an incorrect result that might give
					unauthorized access to the portal. This threat covers a number of
					distinct types of attacks:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							An attacker may attempt to modify the threshold level used by
							the biometric system to authenticate users. If the attacker is
							able to change the threshold (for one or more authorised users),
							the ability to verify the user(s) will be compromised and he may
							succeed in gaining access to the portal or an authorised user may
							be denied entry to the portal.
						</para>
					</listitem>
					<listitem>
						<para>
							An attacker may attempt to modify the biometric authentication
							data (the Biometric Reference Record) of an authorised user with
							the aim of enabling an attacker to masquerade as the authorised
							user and gain access to the portal. Alternatively, an authorised
							user may be denied access to the portal. The attacker may be able
							to insert a new biometric reference, containing biometric data
							belonging to an attacker, with the aim of enabling the impostor to
							gain access to the portal.
						</para>
					</listitem>
				</itemizedlist>
				<para>
					This kind of attack presupposes that the attacker has further
					knowledge about the TOE and maybe special equipment.
				</para>
			</pp:threat>
			<pp:threat xml:id="T.REPRODUCE">
				<para>
					An attacker may try to record and replay, imitate, or
					generate the biometric characteristic of an authorised user. In this
					way the attacker is trying to get access to the assets residing in
					the environment that should be protected with the support of the
					TOE. The attacker will need further knowledge on biometric
					verification systems and the used biometric modality. He may use
					technical equipment for analysing and generation of the biometric
					characteristics. Fingerprint and hand geometry systems are known to
					be vulnerable to artefacts. The setup costs are often low making the
					production of artefacts worthwhile for impostors for common use
					biometric technologies. The attacker may also be supported by an
					authorized user of the TOE (e.g. to imitate his biometric
					characteristic).
				</para>
			</pp:threat>
			<pp:threat xml:id="T.RESIDUAL">
				<para>
					An attacker may try to take advantage of unprotected residual
					security relevant data (e.g. biometric data and settings) during a
					user's session or from a previous, already authenticated user. In
					this way the attacker tries to get access to the security relevant
					settings of the TOE. This threat covers several scenarios including:
				</para>
				<itemizedlist>
					<listitem>
						<para>
							An attacker takes advantage of the verification memory content
							(e.g. by reading the memory content, cache or relevant temporary
							data) using a flaw in a user visible interface of the TOE.A
							physical access to the components of the TOE is not possible for
							an attacker due to the Assumption A.PHYSICAL.
						</para>
					</listitem>
					<listitem>
						<para>
							An attacker may take advantage of residual images at the
							capture device. These are likely to be limited to cases where
							physical contact with the biometric capture device is necessary
							for the biometric modality (e.g. fingerprints)The author of this
							PP is aware of the fact that the capture device is primarily part
							of the environment. But in an unguarded environment it is
							impossible to prevent an attacker from exploiting a residual
							characteristic that remains on the sensor. In the scope of this
							PP, this threat is therefore included. If the capture device of a
							TOE is not vulnerable to this kind of attack, this part of the
							threat may be countered implicitly be the use of a certain sensor
							technology.
						</para>
					</listitem>
				</itemizedlist>
				<para>
					The attacker needs further knowledge about the TOE to find and
					exploit a vulnerability regarding residual data in memory.
				</para>
			</pp:threat>
			<pp:threat xml:id="T.ROLES">
				<para>
					An already enrolled and authenticated user may try to exceed their
					privileges. Two types of this threat are possible within the scope
					of this PP:
					
					<orderedlist>
						<listitem>
							<para>
								If more than one portal is secured by the TOE, an authorized
								user may try to get access to a portal where he has no rights for.
							</para>
						</listitem>
						<listitem>
							<para>
								An authorized user may try to get administrator privileges in
								order to modify the threshold settings of the system or other
								secondary assets.
							</para>
						</listitem>
					</orderedlist>
				</para>
				<para>
					No special knowledge is needed by the attacker to identify the
					general possibility because each authorized user of the system knows
					(after his own enrolment process) that an administrator account with
					higher privileges exists.
				</para>
			</pp:threat>
		</section>
		<section role="APE_SPD.assumptions">
			<info><title>Assumptions</title></info>
			<pp:assumption xml:id="A.ADMINISTRATION">
				<para>
					The TOE administrator is well trained and non hostile.
					He reads the guidance documentation carefully, completely
					understands and applies it. The TOE administrator is responsible to
					accompany the TOE installation and oversees the biometric system
					requirements regarding the TOE as well as the TOE settings and
					requirements.
				</para>
			</pp:assumption>
			<pp:assumption xml:id="A.CAPTURE">
				<para>
					The capture device as user visible interface operates
					inside its regular range and is suitable to be used with the TOE. It
					is assumed that all environmental factors (e.g. lightning) are
					appropriate with respect to the used capture device and biometric
					modality. Furthermore, it is assumed that bypassing the capture
					device in a technical manner is not possible. This assumption does
					not prevent an attacker from presenting an imitated or recorded
					biometric characteristic to the capture device because even in a
					guarded environment (and the TOE is primarily unguarded) such a
					misuse of the system would be possible. Because the capture device
					has to be accessible for each user a moderate physical robustness is
					presupposed.
				</para>
				<note role="application">
					<para>
						The author of a ST has to specify one or more capture
						devices which are allowed to be used with the TOE and has to clearly
						define the range of operation. Furthermore, he has to provide
						evidences that the captures devices will work with the TOE. The TOE
						will have to be used with one of the specified capture devices in
						order to be in its certified configuration.
					</para>
				</note>
			</pp:assumption>
			<pp:assumption xml:id="A.ENROLLMENT">
				<para>
					The enrollment is assumed to be already performed and
					therefore, the biometric reference for each authorized user is
					assumed to be given. The generated reference is of sufficient
					quality and is linked to the correct user. Additionally, it is
					assumed that all biometric references are stored in a way that
					ensures the authenticity and integrity of this data.
				</para>
			</pp:assumption>
			<pp:assumption xml:id="A.ENVIRONMENT">
				<para>
					It is assumed, that necessary TOE operating equipment and adequate
					infrastructure is available (e.g.: operating system, database, LAN,
					public telephone, and guardian). Specifically the following things
					are assumed:
					
					<itemizedlist>
						<listitem>
							<para>
								It is assumed that the direct environment of the TOE supports
								the functionality of the biometric system (e.g.: integration of a
								GINA replacement, audit functionality). Regarding the request of
								the claimed identity, which is necessary for the biometric
								authentication, the environment offers the possibility to
								integrate a claimed identity into the biometric verification
								process.
							</para>
						</listitem>
						<listitem>
							<para>
								The TOE environment provides a database for the biometric
								reference of enrolled users, whereby integrity and authenticity
								are ensured. Also in case of user controlled references (e.g.
								stored on SmartCard or token), measures exist to protect the
								authenticity and integrity of the biometric reference.
							</para>
						</listitem>
						<listitem>
							<para>
								The environment ensures a secure communication of security
								relevant data from and to the TOE.
							</para>
						</listitem>
						<listitem>
							<para>
								It is assumed that the environment provides a functionality to
								review the audit information of the TOE and to ensures that only
								authorized administrators have access to the audit logs.
							</para>
						</listitem>
						<listitem>
							<para>
								It is assumed that the TOE environment is free of viruses,
								trojans, and malicious software.
							</para>
						</listitem>
					</itemizedlist>
				</para>
			</pp:assumption>
			<pp:assumption xml:id="A.PHYSICAL">
				<para>
					It is assumed that the TOE and its components are
					physically protected against unauthorized access or destruction.
					Physical access to the hardware that is used by the TOE is only
					allowed for authorized administrators. This does not cover the
					capture device that has to be accessible for every user.
				</para>
			</pp:assumption>
			<pp:assumption xml:id="A.FALLBACK">
				<para>
					It is assumed that a fall-back mechanism for the
					biometric verification system is available that reaches at least the
					same level of security as the biometric verification system does.
					This fall-back system is used in cases where an authorized user is
					rejected by the biometric verification system (False Rejection).
				</para>
			</pp:assumption>
		</section>
		<section role="APE_SPD.OSPs">
			<info><title>Organizational Security Policies</title></info>
			<pp:OSP xml:id="P.ERROR">
				<para>
					The TOE shall meet recognised national and/or
					international criteria for its security relevant error rates (e.g.
					False Accept Rate (FAR) and False Rejection Rate (FRR)).
				</para>
			</pp:OSP>
			<pp:OSP xml:id="P.USERLIMIT">
				<para>
					Impostors must be prevented from gaining access to the
					portal by making repeated verification attempts using one or more
					claimed user IDs. Therefore the TOE shall be able to limit the
					maximum number of unsuccessful verification attempts.
				</para>
				<note role="application">
					<para>
						Reasonable requirements on error rates are highly dependent on other
						characteristics of the biometric authentication mechanism.
						Characteristics that shall be considered to decide on the acceptable
						values include (but are not limited to):
					
						<itemizedlist>
							<listitem><para>The number of allowed unsuccessful authentication attempts,</para></listitem>
							<listitem><para>The time that is needed to process one authentication attempt,</para></listitem>
							<listitem><para>The concrete environment of the TOE</para></listitem>
						</itemizedlist>
					</para>
					<para>
						The ST author should consider
						<citation><xref linkend="bibISO19795" /></citation>
						in order to identify the security relevant error rates and provide a
						justification for the choice of security relevant error rates.
					</para>
				</note>
			</pp:OSP>
		</section>
	</chapter>
	<chapter role="APE_OBJ">
		<info><title>Security Objectives</title></info>
		<section role="APE_OBJ.TOEs">
			<info><title>Security Objectives for the TOE</title></info>
			<pp:SO xml:id="O.INTEGRITY">
				<para>
					Ensure the integrity of application installation and
					update packages.  History has shown that software products are seldom (if
					ever) shipped without latent errors and vulnerabilities. The ability
					to deploy patches and updates to fielded software is critical to
					enterprise network security.  Exploitation of vulnerabilities in application software is currently
					one of the chief paths by which attackers gain control of target
					computers. In recent years, processor manufacturers, compiler
					developers, and operating system vendors have developed execution
					environment-based mitigations that increase the cost to the
					adversary by adding complexity to the task of gaining execution.
					Often, developers can easily take advantage of these mechanisms by
					using an API provided by the operating system, or by enabling the
					mechanism through compiler or linker options. The following are
					examples of execution environment mitigations:
					
					<itemizedlist>
						<listitem>
							<para>
								Address-space layout randomization provides a mechanism that
								randomizes the addresses at which binary images as well as any
								runtime storage (such as heaps and stacks), are loaded in memory.
								Varying the locations of all memory mappings adds complexity to
								the job of an attacker by reducing the predictability of memory
								layout. The effectiveness of address-space randomization is
								significantly reduced by the existence of any constant mappings.
							</para>
						</listitem>
						<listitem>
							<para>
								Memory execution protection (a.k.a. Data Execution Prevention
								(DEP)) provides a mechanism for terminating an application when
								code is executed from writable memory -- that is, memory intended
								for data only. This can severely limit the places where an
								attacker can load arbitrary code into memory and attempt to run
								it.
							</para>
						</listitem>
						<listitem>
							<para>
								Stack buffer overflow protection provides a mechanism that
								terminates an application when a stack overflow is detected. The
								benefit of this mechanism is that the target application
								terminates before malicious code is able to execute.
							</para>
						</listitem>
						<listitem>
							<para>
								Heap corruption protection provides a mechanism that terminates
								an application when heap structures or metadata corruption is
								detected.
							</para>
						</listitem>
					</itemizedlist>
				</para>
				<para>
					Other execution environment mitigations might include numeric
					overflow protections, automatic runtime bounds checking, supervisor
					mode execution protection, and strict type-checking for numeric
					comparisons.
				</para>
			</pp:SO>
			<pp:SO xml:id="O.QUALITY">
				<para>
					Applications should leverage
					services and APIs provided by the operating system rather than
					implement their own versions of these services and APIs. This is
					especially important for cryptographic services and other complex
					operations such as file and media parsing. 
				</para>
				<para>
					Maintain compatibility with future operating system
					versions and updates by using only documented and supported APIs.
				</para>
			</pp:SO>
			<pp:SO xml:id="O.MANAGEMENT">
				<para>
					An unmanageable network is much more difficult to
					secure than a manageable network. Identifying the software on a
					network is a major challenge to network management. This challenge
					can be addressed using software identification (SWID) tags. SWID
					tags are XML files embedded within software that provide a standard
					method for IT departments to track and manage software. The presence
					of SWIDs can greatly simplify the software management process and
					improve security by enhancing the ability of IT departments to
					manage updates.
				</para>
				<para>
					Simplify the deployment of applications and application
					updates through the use of standard supported deployment mechanisms
					and formats.
				</para>
				<para>
					Ensure that applications use a standard mechanism for
					storing and setting configuration options.
				</para>
				<para>
					Ensure that all traces of applications are removed
					during the application removal operation. Exceptions to this are
					configuration and preference settings that would be useful in the
					event of reinstallation, and audit or log events produced by the
					application.
				</para>
				<para>
					Ensure that applications are configured in the most
					secure manner consistent with the intended use of the product in the
					target environment.
				</para>
			</pp:SO>
			<pp:SO xml:id="O.PROTECTED_STORAGE">
				<para>
					Applications must properly protect sensitive data.
					Sensitive data includes cryptographic keys, passwords, and any other
					data specific to the application that should not be exposed outside
					of the application.
				</para>
			</pp:SO>
			<pp:SO xml:id="O.PROTECTED_COMMS">
				<para>
					Applications must properly protect sensitive data.
					Sensitive data includes cryptographic keys, passwords, and any other
					data specific to the application that should not be exposed outside
					of the application.	
				</para>
			</pp:SO>
			<pp:SO xml:id="O.PROPER_BEHAVIOR">
				<para>
					Modification of executable files is a common technique
					used by malware to gain persistence on a system. This risk can be
					mitigated by requiring that application data be written only to
					directories that prohibit file execution, while executable files are
					confined to directories that can be written only with administrator
					privilege. Application whitelisting is a technique for enforcing
					such policies through enumerating the individual applications that
					may be executed on a system, or by specifying the directories from
					which applications may be executed. Applications can support this
					model by writing data only to locations permitted by security
					policy. Applications should never write to their own installation
					directories, or to the installation directories of other
					applications. Even though these controls are implemented by the
					operating system, it is critical that applications conform to the
					policies these controls implement. If a business-critical
					application does not conform, then there will be pressure to create
					a policy exception for the application. This should never happen.
				</para>
			</pp:SO>
			<pp:SO xml:id="O.PRIVACY">
				<para>
					Modification of executable files is a common technique
					used by malware to gain persistence on a system. This risk can be
					mitigated by requiring that application data be written only to
					directories that prohibit file execution, while executable files are
					confined to directories that can be written only with administrator
					privilege. Application whitelisting is a technique for enforcing
					such policies through enumerating the individual applications that
					may be executed on a system, or by specifying the directories from
					which applications may be executed. Applications can support this
					model by writing data only to locations permitted by security
					policy. Applications should never write to their own installation
					directories, or to the installation directories of other
					applications. Even though these controls are implemented by the
					operating system, it is critical that applications conform to the
					policies these controls implement. If a business-critical
					application does not conform, then there will be pressure to create
					a policy exception for the application. This should never happen.
				</para>
			</pp:SO>
		</section>
		<section role="APE_OBJ.OEs">
			<info><title>Security Objectives for the Operational Environment</title></info>
			
			<para>TO DO: Define operational environmental objectives.</para>
			<!--
				Example: 
					<pp:SOE xml:id="OE.RESIDUAL_CAPTURE"> 
						<para>
							It has to be assured that residual data that may remain at 
							a capture device after use cannot be used to gain access.
						</para> 
						<note role="application">
							In some biometric technologies the capture device is responsible 
							to perform a check against recorded and replayed, imitated or generated biometric 
							data. Because the capture device is not part of the TOE as specified in this 
							PP it is here not possible to determine whether the TOE or its environment 
							have to counter these kinds of attacks. If possible with the specific technology, 
							the ST author is in charge of defining this objective as an objective for 
							the TOE. 
						</note>
						<note role="application">
							In general the capture device that is outside 
							the TOE is responsible to ensure that no residual data remains after it has 
							been used. But in some biometric technologies it is also possible that residual 
							data remains at the capture device but the TOE is able to detect and prohibit 
							the use of this data.
						</note>
					</pp:SOE>
			-->
		</section>
	</chapter>
	<chapter role="APE_REQ">
		<info><title>Security Requirements</title></info>
		
		<!-- TO DO: Link to CC Parts 2 and 3 and Part 1 Annex C (which describes component operations to derive PP requirements derived from CC requirements). -->
		<para>
			This chapter describes the security requirements which have to be
			fulfilled by the TOE. Those requirements include functional
			components from Part 2 and assurance components from Part 3 of
			<citation><xref linkend="bibCC" /></citation> 
			as well as extended components defined in this PP.
		</para>
		
		<!-- 
			TO DO:
			This is boilerplate explaining requirement derivation for all PPs and STs; it could probably be thrown in a macro.
			Yes, notation could vary, but note how we have decoupled style from semantics through <emphasis> @role.
				- Except for iterations, but parenthetical numbering is a pretty common representation.
		-->
		<section>
			<info><title>Notation</title></info>
			
			<para>
				The following notations are used for operations to derive PP requirements from corresponding CC requirements:
			
				<glosslist>
					<glossentry>
						<glossterm><emphasis role="refinement">Refinement</emphasis></glossterm>
						<glossdef>
							<para>adds details to a requirement, further restricting it</para>
							<para>STs and other PPs conforming to this PP may refine a requirement in this PP only if that refinement is no less restrictive.</para>
						</glossdef>
					</glossentry>
					<glossentry>
						<glossterm><emphasis role="selection">Selection</emphasis></glossterm>
						<glossdef>
							<para>selects one or more options provided by the CC in stating a requirement</para>
							<para>
								<pp:selectables>
									<pp:selectable>a</pp:selectable>
									<pp:selectable>b</pp:selectable>
								</pp:selectables> 
								indicates a selection to be specified by STs or other PPs conforming to this PP.  Other PPs may also modify the selection, but only if that selection is no less restrictive than specified in this PP.
							</para>
						</glossdef>
					</glossentry>
					<glossentry>
						<glossterm><emphasis role="assignment">Assignment</emphasis></glossterm>
						<glossdef>
							<para>assigns a specific value to an unspecified parameter (e.g. the length of a password)</para>
							<para>
								<pp:assignable>text</pp:assignable> 
								indicates an assignment to be specified by STs or other PPs conforming to this PP.
							</para>
						</glossdef>
					</glossentry>
					<glossentry>
						<glossterm>Iteration (#)</glossterm>
						<glossdef>
							<para>
								indicates the same CC requirement being derived through different operations (refinements, selections, or assignments);
								denoted with a number inside parentheses, e.g. "(1)"
							</para>
							<para>STs and other PPs conforming to this PP must meet each iterated requirement, but may additionally iterate over any requirements in this PP.</para>
						</glossdef> 
					</glossentry>
				</glosslist>
			</para>
		</section>
		
		<section role="APE_REQ">
			<info><title>Security Functional Requirements for the TOE</title></info>
			
			<!-- TO DO: Cite and link to CC sections. -->
			<para>
				The Security Functional Requirements included in this section are
				derived from Part 2 of the Common Criteria for Information
				Technology Security Evaluation, Version 3.1, Revision 4, with
				additional extended functional components.
			</para>
			
			<!-- TO DO: If CC and PP label the requirement taxonomy in uppercase, why are the @id values lowercase?  Consistency, people!!! -->
			<pp:f-class derives="fau">
				<pp:f-family derives="fau_gen">
					<pp:f-component derives="fau_gen.1">
						<!-- 
							TO DO: 
							Mark up derived requirements (those that are taken from the CC rather than extended) as <emphasis role="[derivation (e.g. refinement, assignment, or selection)]">.
							I haven't seen any iteration yet, but we should consider concise markup for it when we declare a PP schema.
							When CC XML is hosted and improved, replace with macros that indicate *actual* selections, assignments, or substrings being refined and define macros to automate those derivations (like TUViT did for the BVM PP, but more explicitly).
						-->
						<pp:f-element derives="fau_gen.1.1">
							<para>
								The TSF shall be able to generate an audit record of the following auditable events:
								<orderedlist>
									<listitem><para>Start-up and shutdown of the audit functions;</para></listitem>
									<listitem><para>All administrative actions;</para></listitem>
									<listitem><para>User authentication attempts and success/failure of the attempt;</para></listitem>
									<listitem><para>Start-up and shutdown of the OS and kernel</para></listitem>
									<listitem><para>Failures of security functions;</para></listitem>
									<listitem><para>Integrity verification failures;</para></listitem>
									<listitem><para>Software updates;</para></listitem>
									<listitem><para>Insertion or removal of removable media;</para></listitem>
									<listitem><para>Establishment of a synchronizing connection;</para></listitem>
									<listitem><para>Establishment of a trusted channel;</para></listitem>
									<listitem><para>
										<pp:selectables>
											<pp:selectable>Audit records reaching an administrator-configurable percentage of audit capacity</pp:selectable>
											<pp:selectable>
												<pp:assignable>other auditable events derived from this profile</pp:assignable>
											</pp:selectable>
										</pp:selectables>
									</para></listitem>
								</orderedlist>
							</para>
						</pp:f-element>
						<pp:f-element derives="fau_gen.1.2">
							<para>
								The TSF shall record within each audit
								record at least the following information: Date and time of the
								event, type of event, subject identity, and the outcome (success
								or failure) of the event.
							</para>
						</pp:f-element>
					</pp:f-component>
				</pp:f-family>
			</pp:f-class>
			
			<pp:f-class derives="fdp">
				<pp:f-family xml:id="fdp_dec_ext" name="Declaration of Intent">
					<pp:f-component xml:id="fdp_dec_ext.1" name="Declaration of Intent to Use Platform Resources">
						<pp:f-element xml:id="fdp_dec_ext.1.1">
							<para>
								Applications must declare a list of
								platform resources that the application requires. In particular,
								applications must declare their intent to use hardware
								resources that could provide access to sensitive information
								(e.g. camera, WiFi, GPS, or Bluetooth).
							</para>
						</pp:f-element>
						<pp:f-element xml:id="fdp_dec_ext.1.2">
							<para>
								Applications should declare their intent to access software
								resources or other applications that provide access to
								potentially sensitive information, such as address book,
								calendar, or caller lists. (For example, a program which does not
								need to determine user location should not ask for permission to
								use location data provided by GPS.)
							</para>
						</pp:f-element>
					
						<note role="application">
							<para>
								While the application is responsible for requesting access to a
								device, it is the operating system's responsibility to enforce
								whether or not the application can actually use the device.
							</para>
						</note>
					</pp:f-component>
				</pp:f-family>
				
				<pp:f-family xml:id="fdp_dar_ext" name="Storage of Sensitive Data">
					<pp:f-component xml:id="fdp_dar_ext.1" name="Storage Of Sensitive Application Data">
						<pp:f-element xml:id="fdp_dar_ext.1.1">
							<para>
								If an application stores sensitive data
								on media or [non-volatile?] memory, then all data not designated
								to be available at screen lock must be encrypted while it is at
								rest.
							</para>
						</pp:f-element>
						<pp:f-element xml:id="fdp_dar_ext.1.2">
							<para>
								Applications must not leave sensitive data unprotected in memory
								or on media beyond the data's period of use. Such data must be
								erased using a cryptographic wipe or a single pass overwrite with
								arbitrary values. This includes sensitive data stored in
								temporary files and audit logs.
							</para>
							<note role="application">
								<para>
									"Period of use" is the period of time that the application
									actively processes the data. At the very latest, the period of
									use ends when the application is closed, but usually it would end
									prior to that.
								</para>
							</note>
						</pp:f-element>
					
						<note role="application">
							<para>
								Requirements 2 and 3 are not intended to make the application
								responsible for how the operating system handles data with
								respect to paging or swap files. They are intended, however, to
								ameliorate the problems inherent in paging or swapping by
								reducing the likelihood that plaintext sensitive data is left in
								unused memory pages -- which are more likely to be swapped to
								disk. Of course, the requirements also cover explicit writes to
								memory or media. In this sense "media" refers to traditional
								media as well as other non-volatile or persistent locations. So,
								the requirement applies anytime sensitive data is written
								anywhere to be stored.
							</para>
						</note>
					</pp:f-component>
				</pp:f-family>
			</pp:f-class>

			<pp:f-class derives="fmt">
				<pp:f-family derives="fmt_smf">
					<pp:f-component derives="fmt_smf.1">
						<pp:f-element derives="fmt_smf.1.1">
							<para>
								The TSF shall be capable of performing the following management functions: 
								
								<!-- TO DO: Actually, most assignments are lists.  There should be a way to mark that up semantically per-list rather than per-item...Macro! -->
								<orderedlist>
									<listitem><para><emphasis role="assignment">enable/disable transmission of any information from the system (e.g. crash dumps, user registration) over the network</emphasis></para></listitem>
									<listitem><para><emphasis role="assignment">enable/disable automatic software update functionality if it exists</emphasis></para></listitem>
								</orderedlist>
							</para>
						</pp:f-element>
					</pp:f-component>
				</pp:f-family>
				
				<pp:f-family xml:id="fmt_mec_ext" name="Configuration Management">
					<pp:f-component xml:id="fmt_mec_ext.1" name="Standard Configuration Mechanism">
						<pp:f-element xml:id="fmt_mec_ext.1.1">
							<para>Applications should use standard operating system-provided mechanisms for storing and setting configuration options.</para>
						</pp:f-element>
						<pp:f-element xml:id="fmt_mec_ext.1.2">
							<para>
								Applications must follow operating system
								mechanisms and conventions for storing application data and
								configuration settings.
							</para>
						</pp:f-element>
					</pp:f-component>
				</pp:f-family>
				
				<pp:f-family xml:id="fmt_cfg_ext" name="Secure Configuration">
					<pp:f-component xml:id="fmt_cfg_ext.1" name="Secure by Default Configuration">
						<pp:f-element xml:id="fmt_cfg_ext.1.1">
							<para>Applications must be secure by default on installation.</para>
						
							<note role="application">
								<para>
									Examples of non-secure configurations include:
								
									<itemizedlist>
										<listitem><para>Default passwords across all installations.</para></listitem>
										<listitem><para>Credentials transmitted/stored in the clear.</para></listitem>
										<listitem><para>Phone-home capability on by default.</para></listitem>
										<listitem><para>Inappropriate default file permissions.</para></listitem>
									</itemizedlist>
								</para>
							</note>
						</pp:f-element>
						<pp:f-element xml:id="fmt_cfg_ext.1.2">
							<para>
								Applications must be configured by default to not send PII; this
								capability must be "opt-in."
							</para>
						</pp:f-element>
					</pp:f-component>
				</pp:f-family>
				
				<pp:f-family xml:id="fmt_not_ext" name="Notification">
					<pp:f-component xml:id="fmt_not_ext.1" name="Notification of Update">
						<pp:f-element xml:id="fmt_not_ext.1.1">
							<para>
								If the update process is initiated by an
								application, then the application should report to the user the
								last time it checked for available updates.
							</para>
						</pp:f-element>
					
						<note role="application">
							<para>
								In-app ad-ware is subject to the same requirements as its host
								app regarding collection of information.
							</para>
						</note>
					</pp:f-component>
				</pp:f-family>
			</pp:f-class>
			
			<pp:f-class derives="fcs">
				<pp:f-family xml:id="fcs_rbg_ext" name="Random Bit Generation">
					<pp:f-component xml:id="fcs_rbg_ext.1" name="Entropy Source for Random Bit Generation">
						<pp:f-element xml:id="fcs_rbg_ext.1.1">
							<para>
								If an application uses random numbers for
								cryptographic purposes it must get entropy from a FIPS-compliant
								source, if such a source is available on the platform.
							</para>
						</pp:f-element>			
					</pp:f-component>
				</pp:f-family>
			</pp:f-class>
			
			<pp:f-class derives="fpr">
				<pp:f-family xml:id="fpr_ano_ext" name="Anonymous Networking">
					<pp:f-component xml:id="fpr_ano_ext.1" name="Anonymous Network Behavior">
						<pp:f-element xml:id="fpr_ano_ext.1.1">
							<para>
								The capability of an application to
								collect information from the system (e.g. crash dumps) and
								transmit it over a network must be configurable.
							</para>
						</pp:f-element>
						<pp:f-element xml:id="fpr_ano_ext.1.2">
							<para>
								Applications must have the approval of
								the user or system owner before such information is transmitted
								over a network.
							</para>
						</pp:f-element>
						<!-- TO DO: Define PII and other acronyms in a glossary. -->
						<pp:f-element xml:id="fpr_ano_ext.1.3">
							<para>
								Applications must be configured by default to not send PII; this
								capability must be "opt-in".
							</para>
						
							<note role="application">
								<para>
									In-app ad-ware is subject to the same requirements as its host
									app regarding collection of information.
								</para>
							</note>
						</pp:f-element>
					</pp:f-component>
				</pp:f-family>
			</pp:f-class>
			
			<pp:f-class derives="ftp">
				<pp:f-family derives="ftp_itc">
					<pp:f-component xml:id="ftp_itc_ext" name="Handling Of Sensitive Application Data">
						<pp:f-element xml:id="ftp_itc_ext.1.1">
							<para>
								If an application transmits sensitive
								data over an untrusted network, the data must be encrypted using
								standards-based protocols that ensure confidentiality and
								integrity of the data and authentication of the other endpoint.
							</para>
						</pp:f-element>
					</pp:f-component>
				</pp:f-family>
			</pp:f-class>
		
			<pp:f-class derives="fpt">
				<pp:f-family xml:id="fpt_api_ext" name="Standard Services and APIs">
					<pp:f-component xml:id="fpt_api_ext.1" name="Standard Services and APIs">
						<pp:f-element xml:id="fpt_api_ext.1.1">
							<para>
								Applications must use operating system-provided or standard
								certified cryptographic libraries, if such libraries are
								available on the platform. Custom versions of cryptographic
								services should not be used unless providing cryptographic
								services is the purpose of the application.
							</para>
							<orderedlist>
								<listitem><para>If the core function of the application is providing
									security services, then FIPS 140-2 must be used for designing
									and implementing cryptographic libraries and FIPS certification
									is required.</para></listitem>
							</orderedlist>
							<note role="application">
								<para>
									Applications that provide cryptographic services are likely
									covered by purpose-specific protection profiles (e.g. e-mail
									client, VPN client, VOIP client). Such applications must comply
									with both the purpose-specific PP and this PP. Where requirements
									are duplicated or in conflict, the purpose-specific PP shall
									rule.
								</para>
							</note>
						</pp:f-element>
					
						<!-- TO DO: Hyperlink URLs. -->
						<pp:f-element xml:id="fpt_api_ext.1.2">
							<para>
								Applications must use supported operating
								system-provided libraries for parsing any structured files whose
								format is included in the IANA MIME media types as listed at
								http://www.iana.org/assignments/media-types, if such libraries
								are available on the platform. This includes many image, audio,
								video, and content file formats.
							</para>
						</pp:f-element>
					
						<pp:f-element xml:id="fpt_api_ext.1.3">
							<para>
								Applications must use only officially
								documented and supported operating system API functions.
							</para>
						</pp:f-element>
					</pp:f-component>
				
					<pp:f-component xml:id="fpt_aex_ext.1" name="Execution Environment Mitigations">
						<pp:f-element xml:id="fpt_aex_ext.1.1">
							<para>
								An application must take advantage of the execution
								environment-based vulnerability mitigation mechanisms supported
								by the platform, including:
							
								<orderedlist>
									<listitem><para>address-space layout randomization,</para></listitem>
									<listitem><para>memory execution protection (e.g. DEP),</para></listitem>
									<listitem><para>stack buffer overflow protection, and</para></listitem>
									<listitem><para>heap corruption detection.</para></listitem>
									<listitem><para><pp:assignable>other such mechanisms</pp:assignable></para></listitem>
								</orderedlist>
							</para>
						</pp:f-element>
						<pp:f-element xml:id="fpt_aex_ext.1.2">
							<para>
								An application must not require that execution environment-based
								vulnerability mitigations or OS-provided security features be
								disabled or weakened. All of the following are prohibited:
							
								<orderedlist>
									<listitem><para>The application must not require the disabling of DEP or ASLR.</para></listitem>
									<listitem><para>The application must not create a firewall exception without the consent of the user.</para></listitem>
									<listitem><para>The application must not require that OS-supported mandatory access controls be disabled.</para></listitem>
									<listitem><para><pp:assignable>other such relaxations</pp:assignable></para></listitem>
								</orderedlist>
							</para>
						</pp:f-element>
						<pp:f-element xml:id="fpt_aex_ext.1.3">
							<para>
								Applications must not write to directories that contain
								executable files.
							</para>
							<note role="application">
								If an application is specifically designed to produce executable
								files (such as a compiler), those files may be written to a
								specified directory from which execution is permitted.
							</note>
						</pp:f-element>
					</pp:f-component>
				</pp:f-family>
				
				<pp:f-family xml:id="fpt_tud_ext" name="Trusted Update">
					<pp:f-component xml:id="fpt_tud_ext.1" name="Integrity for Installation and Update">
						<!-- TO DO: Cite references. -->
						<pp:f-element xml:id="fpt_tud_ext.1.1">
							<para>
								Application installation and update packages should be signed by
								the vendor in conformance with NIST SP 800-89, Recommendation for
								Obtaining Assurances for Digital Signature Applications, using an
								approved digital signature algorithm as specified in NIST FIPS
								186-3, Digital Signature Standard, that provides at least 112
								bits of security strength, in accordance with NIST SP 800-131A,
								Transitions: Recommendation for Transitioning the Use of
								Cryptographic Algorithms and Key Lengths.
							</para>
							<note role="application">
								<para>
									Signatures of signed installation and update packages should be
									verified by the operating system's application installation
									mechanism. Since the existence of such a mechanism is a
									requirement on the operating system (and not the application), it
									is not specified here.
								</para>
							</note>
						</pp:f-element>
						<pp:f-element xml:id="fpt_tud_ext.1.2">
							<para>
								Applications and application updates should be distributed using
								a standard mechanism such as an operating system-supported
								package manager.
							</para>
							<note role="application">
								<para>
									The "standard mechanism" refers to a means of distribution that
									is not custom for a particular application, but can be used by
									different vendors to distribute products. The idea is that
									administrators should not have to learn to use specialized
									distribution mechanisms for every application.
								</para>
							</note>
						</pp:f-element>
						<pp:f-element xml:id="fpt_tud_ext.1.3">
							<para>Applications must support a removal operation.</para>
						</pp:f-element>
						<pp:f-element xml:id="fpt_tud_ext.1.4">
							<para>
								Application removal must result in removal of all traces of the
								application, except for configuration and preference settings,
								and audit or log events.
							</para>
						</pp:f-element>
						<note role="application">
							<para>
								If the application uses an operating system or standard
								install/uninstall mechanism, then these requirements are
								considered met.
							</para>
						</note>
					</pp:f-component>
				</pp:f-family>
				
				<pp:f-family xml:id="fpt_idv_ext" name="Identification and Versions">
					<pp:f-component xml:id="fpt_idv_ext.1" name="Software Identification and Versions">
						<pp:f-element xml:id="fpt_idv_ext.1.1">
							<para>
								Applications must include software
								identification (SWID) tags that comply with the ISO/IEC
								19770-2:2009 standard.
							</para>
						</pp:f-element>
						<pp:f-element xml:id="fpt_idv_ext.1.2">
							<para>Applications must present correct product version information.</para>
						</pp:f-element>
						
						<note role="application">
							<para>
								The following requirements were removed, as subsumed by Requirement 1:
								<orderedlist>
									<listitem><para>SWID tags must correctly identify the vendor responsible for the software.</para></listitem>
									<listitem>
										<para>
											An update that differs in any way from a prior update (e.g.
											different binary images or configuration data) must have a unique version number.
										</para>
									</listitem>
								</orderedlist>
							</para>
						</note>
					</pp:f-component>
				</pp:f-family>
			</pp:f-class>
		</section>
	</chapter>
</pp:PP>
