<?xml version="1.0" encoding="utf-8"?>
<technical-decisions  xmlns:h="http://www.w3.org/1999/xhtml" 
		      xmlns="https://niap-ccevs.org/cc/v1"
		      xmlns:sec="https://niap-ccevs.org/cc/v1/section">

  <bunch>
    <applies-to max-inclusive="1.4" name="Protection Profile for Application Software"/>

    <decision id='0669'>
	<!-- Uses TD0655 as a base -->
    	<notes>FIA_X509_EXT.1 Test 4 Interpretation</notes>

		<change xpath=".//f-element[@id='fel-certauth-how']" mode="replace">
			<f-element id="fel-certauth-how">
				<title>
					The application shall 
					<selectables onlyone="yes">
						<selectable>invoke platform-provided functionality</selectable>
						<selectable>implement functionality</selectable>
					</selectables>
					to validate certificates in accordance with the following rules:<h:ul>
						<h:li>RFC 5280 certificate validation and certificate path validation.</h:li>
						<h:li>The certificate path must terminate with a trusted CA certificate.</h:li>
						<h:li>The application shall validate a certificate path by ensuring the presence of the 
							basicConstraints extension and that the CA flag is set to TRUE for all CA 
							certificates, and that any path constraints are met.
						</h:li>
						<h:li>The application shall validate that any CA certificate includes caSigning purpose in the key
							usage field</h:li>
						<h:li>The application shall validate the revocation status of the certificate using 
							<selectables>
								<selectable>OCSP as specified in RFC 6960</selectable>
								<selectable>CRL as specified in RFC 5280 Section 6.3</selectable>
								<selectable>CRL as specified in RFC 8603</selectable>
								<selectable>an OCSP TLS Status Request Extension (OCSP stapling) as specified in RFC 6066</selectable>
								<selectable>OCSP TLS Multi-Certificate Status Request Extension (i.e., OCSP Multi-Stapling) as specified in RFC 6961</selectable>
							</selectables>.
						</h:li>
						<h:li>The application shall validate the extendedKeyUsage (EKU) field according to the 
							following rules:<h:ul>
							<h:li>Certificates used for trusted updates and executable code integrity verification 
								shall have the Code Signing Purpose (id-kp 3 with OID 1.3.6.1.5.5.7.3.3) in the 
								extendedKeyUsage field.
							</h:li>
							<h:li>Server certificates presented for TLS shall have the Server Authentication
								purpose (id-kp 1 with OID 1.3.6.1.5.5.7.3.1) in the EKU field.
							</h:li>
							<h:li>
								Client certificates presented for TLS shall have the Client Authentication purpose 
								(id-kp 2 with OID 1.3.6.1.5.5.7.3.2) in the EKU field.
							</h:li>
							<h:li>
								S/MIME certificates presented for email encryption and signature shall have the 
								Email Protection purpose (id-kp 4 with OID 1.3.6.1.5.5.7.3.4) in the EKU field.
							</h:li>
							<h:li>
								OCSP certificates presented for OCSP responses shall have the OCSP Signing purpose 
								(id-kp 9 with OID 1.3.6.1.5.5.7.3.9) in the EKU field.
							</h:li>
							<h:li>
								Server certificates presented for EST shall have the CMC Registration Authority 
								(RA) purpose (id-kp-cmcRA with OID 1.3.6.1.5.5.7.3.28) in the EKU field.
							</h:li></h:ul>
						</h:li>
					</h:ul>
				</title>
				<note role="application">
					FIA_X509_EXT.1.1 lists the rules for validating certificates. The ST author shall select whether
					revocation status is verified using OCSP or CRLs. FIA_X509_EXT.2 requires that certificates are
					used for HTTPS, TLS, and DTLS; this use requires that the extendedKeyUsage rules are verified.
					If OCSP is not supported the EKU provision for checking the OCSP Signing purpose is met by 
					default.<h:p/>
					This requirement is included if the protocol(s) selected in FTP_DIT_EXT.1.1 require the use of
					certificates. If the TOE implements TLS as a HTTPS/TLS server with no mutual authentication,
					this requirement is not applicable.<h:p/>
					OCSP stapling and OCSP multi-stapling only support TLS server certificate validation. If other 
					certificate types are validated, either OCSP or CRL should be claimed.<h:p/>
					Regardless of the selection of "<h:i>implement functionality or invoke platform-provided 
					functionality</h:i>," the validation is expected to end in a trusted root CA certificate in a root
					store managed by the platform.
				</note>
				<aactivity level="element">
					<TSS>
						The evaluator shall ensure the TSS describes where the check of validity of the certificates
						takes place. The evaluator ensures the TSS also provides a description of the certificate 
						path validation algorithm.<h:p/>
					</TSS>
					<Guidance>None.<h:p/></Guidance>
					<Tests>
						The tests described must be performed in conjunction with the other certificate services evaluation 
						activities, including the functions in FIA_X509_EXT.2.1. The tests for the extendedKeyUsage rules are 
						performed in conjunction with the uses that require those rules. If the application supports chains of
						length four or greater, the evaluator shall create a chain of at least four certificates: 
						the node certificate to be tested, two Intermediate CAs, and the self-signed Root CA. If 
						the application supports a maximum trust depth of two, then a chain with no Intermediate
						CA should instead be created.
						<testlist>
							<test>
								The evaluator shall demonstrate that validating a certificate without a valid certification path results in the function 
								failing, for each of the following reasons, in turn:<h:ul>
								<h:li>by establishing a certificate path in which one of the issuing certificates is not a CA certificate,</h:li>
								<h:li>by omitting the basicConstraints field in one of the issuing certificates,</h:li>
								<h:li>by setting the basicConstraints field in an issuing certificate to have CA=False,</h:li>
								<h:li>by omitting the CA signing bit of the key usage field in an issuing certificate, and</h:li>
								<h:li>by setting the path length field of a valid CA field to a value strictly less than the certificate path.</h:li>
								</h:ul>
								The evaluator shall then establish a valid certificate path consisting of valid CA certificates, and demonstrate that the 
								function succeeds. The evaluator shall then remove trust in one of the CA certificates, and show that the function fails.
							</test>
							<test>
								The evaluator shall demonstrate that validating an expired certificate results in the function failing.
							</test>
							<test>
								The evaluator shall test that the TOE can properly handle revoked certificates-â€œconditional on whether
								CRL, OCSP, OCSP Stapling or OCSP Multi-stapling is selected; if multiple methods are selected, then
								the following tests shall be performed for each method:
								<h:ul>
								<h:li>The evaluator shall test revocation of the node certificate.</h:li>
								<h:li>The evaluator shall also test revocation of an intermediate CA certificate (i.e. the intermediate
									CA certificate should be revoked by the root CA), if intermediate CA certificates are supported.
									If OCSP stapling per RFC 6066 is the only supported revocation method, this test is omitted.</h:li>
								<h:li>The evaluator shall ensure that a valid certificate is used, and that the validation function 
									succeeds. The evaluator then attempts the test with a certificate that has been revoked (for each 
									method chosen in the selection) to ensure when the certificate is no longer valid that the 
									validation function fails.</h:li>
								</h:ul>
							</test>
							<test>
								<!-- Edited 9/28/22 -->
								If any OCSP option is selected, the evaluator shall ensure the TSF has no other source of revocation 
								information available and configure the OCSP server or use a man-in-the-middle tool to present an OCSP response 
								signed by a certificate that does not have the OCSP signing purpose and which is the only source of revocation status 
								information advertised by the CA issuing the certificate being validated. The evaluator shall verify that validation of 
								the OCSP response fails and that the TOE treats the certificate being checked as invalid and rejects the connection. 
								If CRL is selected, the evaluator shall likewise configure the CA be the only source of revocation status information, and
								 sign a CRL with a certificate that does not have the cRLsign key usage bit set. The evaluator shall verify that
								validation of the CRL fails and that the TOE treats the certificate being checked as invalid and rejects the connection.
								
								<b>Note</b>: The intent of this test is to ensure a TSF does not trust invalid revocation status information. A TSF
								receiving invalid revocation status information from the only advertised certificate status provider should
								treat the certificate whose status is being checked as invalid. This should generally be treated differently
								from the case where the TSF is not able to establish a connection to check revocation status information,
								but it is acceptable that the TSF ignore any invalid information and attempt to find another source of
								revocation status (another advertised provider, a locally configured provider, or cached information) and
								treat this situation as not having a connection to a valid certificate status provider. 
								<!-- -->
							</test>
							<test>
								The evaluator shall modify any byte in the first eight bytes of the certificate and demonstrate that 
								the certificate fails to validate. (The certificate will fail to parse correctly.)
							</test>
							<test>
								 The evaluator shall modify any byte in the last byte of the certificate and demonstrate that the 
								 certificate fails to validate. (The signature on the certificate will not validate.)
							</test>
							<test>
								The evaluator shall modify any byte in the public key of the certificate and demonstrate that the
								certificate fails to validate. (The signature on the certificate will not validate.)
							</test>
							<test>
								 (Conditional on support for EC certificates as indicated in FCS_COP.1/Sig). The evaluator shall establish a valid,
								 trusted certificate chain consisting of an EC leaf certificate, an EC Intermediate CA certificate not 
								 designated as a trust anchor, and an EC certificate designated as a trusted anchor, where the elliptic 
								 curve parameters are specified as a named curve. The evaluator shall confirm that the TOE validates 
								 the certificate chain.
							</test>
							<test>
								(Conditional on support for EC certificates as indicated in FCS_COP.1/Sig). The evaluator shall replace
								the intermediate certificate in the certificate chain for Test 9 with a modified certificate, where 
								the modified intermediate CA has a public key information field where the EC parameters uses an 
								explicit format version of the Elliptic Curve parameters in the public key information field of the
								intermediate CA certificate from Test 9, and the modified Intermediate CA certificate is signed by 
								the trusted EC root CA, but having no other changes. The evaluator shall confirm the TOE treats the
								certificate as invalid.
							</test>
						</testlist>
					</Tests>
				</aactivity>
			</f-element>
	</change>
    </decision>
  </bunch>
</technical-decisions>